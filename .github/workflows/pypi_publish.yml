# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish to PyPi

on:
  push:
    branches:
      - "master"
    tags:
      - "*"

permissions:
  contents: read

jobs:
  release:
    if: startsWith(github.ref, 'refs/tags') #for publishing new tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8 ]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get tag
      id: tag
      run: echo "::set-output name=version::${GITHUB_REF#refs/tags/}"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install twine

    # Upload to PyPI
    - name: Build package
      run: python3 -m build

    - name: Check the package
      run: twine check dist/*

    - name: Push to PyPI
      run: python3 -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    - name: Create release notes
      if: success()
      run: |
        echo "Successfully published polyID ${{ steps.tag.outputs.version }} to PyPI" >> release_notes.txt

    - name: Upload release artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pypi-publish-logs-${{ github.run_id }}
        path: |
          release_notes.txt
          dist/
        retention-days: 30

    - name: Notify on failure
      if: failure()
      run: |
        echo "PyPI publish failed for version ${{ steps.tag.outputs.version }}" >> failure_log.txt
        echo "Check artifacts for detailed logs" >> failure_log.txt

    - name: Upload failure logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: pypi-publish-failure-${{ github.run_id }}
        path: failure_log.txt
        retention-days: 7